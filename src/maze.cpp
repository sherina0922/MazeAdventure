//
//  maze.cpp
//  final-project-sherina0922-master
//
//  Created by Sherina Hung on 4/15/18.
//

#include "../src/maze.hpp"
#include <cmath>

//--------------------------------------------------------------
void Maze::SetMode(int new_mode) {
    if (new_mode > 1) {
        mode = new_mode;
    } else {
        mode = MIN_VISIBILITY;
    }
}

//--------------------------------------------------------------
void Maze::SetMazeCompleted(bool new_status) {
    maze_completed = new_status;
}

//--------------------------------------------------------------
void Maze::SetInBattleMode(bool isTrue) {
    inBattleMode = isTrue;
}

//--------------------------------------------------------------
int Maze::BoxTranslateCoordinates(bool isFreeMode, int location, bool isX) {
    if (!isX) {
        return -location * CUBE_SIZE + MAZE_TRANSLATE * HALF;
    }
    if (isFreeMode) {
        if (isX) {
            return location * CUBE_SIZE - MAZE_TRANSLATE;
        }
    } else {
        //Timed Mode
        if (isX) {
            return location * CUBE_SIZE - MAZE_TRANSLATE * HALF;
        }
    }
}

//--------------------------------------------------------------
void Maze::DrawMaze() {
    
    if (maze_completed) {
        if (free_game_mode) {
            if (!maze_copy_player->player_stats.isDead) {
                DrawWin();
            } else {
                //player dead
                //game_over_sound.play();
            }
        } else {
            maze_completed = false;
            TimeMazeSetup();
            return;
        }
    } else {
        
        for (int current_y = 0; current_y < HEIGHT; current_y++) {
            for (int current_x = 0; current_x < WIDTH; current_x++) {
                
                if (std::abs(current_x - current_posX) < mode &&
                    std::abs(current_y - current_posY) < mode) {
                    
                    ofPushMatrix();
                    ofTranslate(BoxTranslateCoordinates(free_game_mode, current_x, true), BoxTranslateCoordinates(free_game_mode, current_y, false), 0);
                    
                    if (maze_structure[current_x][current_y] == '#') {
                        ofSetColor(GRAY, GRAY, GRAY); //Set to TRANSPARENT GRAY for maze walls
                        
                    } else if (std::isdigit(maze_structure[current_x][current_y])) { // == 'M'
                        ofSetColor(0, 0, FULL_COLOR); //Set to BLUE for monsters
                    
                    } else if (maze_structure[current_x][current_y] == ' ') {
                        ofSetColor(0, 0, 0); //Set to BLACK
                        
                    }
                    ofFill();
                    ofDrawBox(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE);
                    ofNoFill();
                    ofSetColor(0);
                    ofDrawBox(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE);
                    ofPopMatrix();
                }
            }
        }
        
        //draw player box
        ofPushMatrix();
        ofTranslate(BoxTranslateCoordinates(free_game_mode, current_posX, true), BoxTranslateCoordinates(free_game_mode, current_posY, false), 0);
        ofSetColor(FULL_COLOR, 0.0, 0.0); //Set to RED
        ofFill();
        ofDrawBox(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE);
        ofNoFill();
        ofSetColor(0);
        ofDrawBox(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE);
        ofPopMatrix();
        
        //draw goal box
        ofPushMatrix();
        ofTranslate(BoxTranslateCoordinates(free_game_mode, end_x, true), BoxTranslateCoordinates(free_game_mode, end_y, false), 0);
        ofSetColor(0.0, FULL_COLOR, 0.0); //Set to GREEN
        ofFill();
        ofDrawBox(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE);
        ofNoFill();
        ofSetColor(0);
        ofDrawBox(CUBE_SIZE, CUBE_SIZE, CUBE_SIZE);
        ofPopMatrix();
        
    }
}

//--------------------------------------------------------------
void Maze::DrawWin() {
    ofBackground(FULL_COLOR, FULL_COLOR, FULL_COLOR);
    ofSetColor(0, 0, 0);
    ofDrawBitmapString("CONGRATULATIONS!\nYOU WIN!", 0, 0);
    return;
}

//--------------------------------------------------------------
void Maze::ReadMazeFromFile() {
    std::string line;
    char each_char;
    std::ifstream file;
    std::string file_contents;
    std::string file_path = "";
    
    if (free_game_mode) {
        //Maze below derived from https://www.youtube.com/watch?v=9Ozu-B2HLY4
        file_path = "/Users/sherinahung/Documents/GitHub/final-project-sherina0922/bin/data/free-maze-data.txt";
    } else {
        //Maze below randomly generated by algorithm and manually inserted in file
        file_path = "/Users/sherinahung/Documents/GitHub/final-project-sherina0922/bin/data/maze-data.txt";
        //"/Users/sherinahung/Documents/GitHub/final-project-sherina0922/bin/data/test-maze-data.txt";
        //"/Users/sherinahung/Documents/GitHub/final-project-sherina0922/bin/data/maze-data.txt";
    }
    file.open(file_path);
    if (file.is_open()) {
        while (file >> std::noskipws >> each_char) {
            file_contents += each_char;
        }
        file.close();
    }
    file.close();
    file_contents.erase(std::remove(file_contents.begin(), file_contents.end(), '\n'), file_contents.end());
    
    if (!free_game_mode) { //time game mode
        ///*
         //backup for reading from preloaded file
        int vector_index = 0;
        std::vector<std::string> separated_maze_string_vector(file_contents.length() / CHARS_IN_MAZE); //split string by maze char size
        for (int index = 0; index < file_contents.length(); index += CHARS_IN_MAZE) {
            separated_maze_string_vector.at(vector_index++) = file_contents.substr(index, CHARS_IN_MAZE);
        }
        
        vector <vector<char>> temp_maze_structure;
        int char_count;
        for (std::string each_maze_string : separated_maze_string_vector) {
            temp_maze_structure.clear();
            char_count = 0;
            temp_maze_structure.resize(SIZE);
            for (int index_x = 0; index_x < SIZE; index_x++) {
                temp_maze_structure.at(index_x).resize(SIZE);
                //update each cell
                for (int index_y = 0; index_y < SIZE; index_y++) {
                    temp_maze_structure.at(index_x).at(index_y) = each_maze_string.at(char_count++);
                }
            }
            generated_maze_vector.push_back(temp_maze_structure);
        }
         //*/
        /*
         //on the spot random generating time game mode
        int char_count = 0;
        if (file_contents.length() != CHARS_IN_MAZE) {
            std::cout << "Error in maze char length";
            return;
        }
        for (int index_x = 0; index_x < SIZE; index_x++) {
            maze_structure.at(index_x).resize(SIZE);
            //update each cell
            for (int index_y = 0; index_y < SIZE; index_y++) {
                maze_structure.at(index_x).at(index_y) = file_contents.at(char_count++);
            }
        } */
        
    } else { //free game mode
        int char_count = 0;
        maze_structure.resize(WIDTH);
        for (int index = 0; index < WIDTH; ++index) {
            maze_structure[index].resize(HEIGHT);
        }
        
        for (int y = 0; y < HEIGHT; y++) {
            for (int x = 0; x < WIDTH; x++) {
                maze_structure[x][y] = file_contents.at(char_count++);
                if (maze_structure[x][y] == 'S') {
                    start_x = current_posX = x;
                    start_y = current_posY = y;
                } else if (maze_structure[x][y] == 'E') {
                    end_x = x;
                    end_y = y;
                }
            }
        }
    }
    next_maze_sound.load("enter_battle.wav");
    win_sound.load("game_win.wav");
    game_over_sound.load("game_over.wav");
    
}

//--------------------------------------------------------------
void Maze::TimeMazeSetup() {
    
    //PopulateNewMaze(); //random generating
    free_game_mode = false;
    if (generated_maze_vector.empty()) {
        ReadMazeFromFile();
    }
    
    maze_structure.resize(SIZE);
    for (int index = 0; index < SIZE; index++) {
        maze_structure[index].resize(SIZE);
    }
    
    if (number_games < generated_maze_vector.size() - 1) {
        SetMode(SIZE - DECREASE_VISIBILITY * number_games++); //decrease visibility as continue to go through mazes
        maze_structure = generated_maze_vector.at(number_games); //if using pre-generated mazes
    } else {
        game_ended = true;
        return;
    }
    
    
    for (int x = 0; x < SIZE; x++) {
        for (int y = 0; y < SIZE; y++) {
            if (maze_structure[x][y] == 'S') { //setting starting location
                start_x = current_posX = x;
                start_y = current_posY = y;
            } else if (maze_structure[x][y] == 'E') { //setting end location
                end_x = x;
                end_y = y;
            }
        }
    }
}

//--------------------------------------------------------------
void Maze::FreeMazeSetup(Character *current_player) {
    maze_copy_player = current_player;
    
    free_game_mode = true;
    ReadMazeFromFile();
}

//--------------------------------------------------------------
void Maze::MazeKeyPressed(const char key) {
    if (inBattleMode) {
        return;
    }
    
    switch (key) {
        case 'w':
            // Move up
            if (maze_structure[current_posX][current_posY - 1] != '#') {
                current_posY--;
            }
            break;
            
        case 's':
            //Move down
            if (maze_structure[current_posX][current_posY + 1] != '#') {
                current_posY++;
            }
            break;
            
        case 'a':
            //Move left
            if (maze_structure[current_posX - 1][current_posY] != '#') {
                current_posX--;
            }
            break;
            
        case 'd':
            //Move right
            if (maze_structure[current_posX + 1][current_posY] != '#') {
                current_posX++;
            }
            break;
    }
    CheckGameStatus(current_posX, current_posY);
}

//--------------------------------------------------------------
void Maze::CameraMovePosition(int camera_current_x, int camera_current_y) {
    if ((camera_current_x == 0 || camera_current_y == 0)
        || std::abs(camera_current_x) > MAZE_TRANSLATE
        || std::abs(camera_current_y) > MAZE_TRANSLATE) {
        return;
    }
    
    //Determine which direction to move from angle of brightest point
    //Splits screen into "triangles"
    
    double pixel_slope = std::atan(camera_current_y / camera_current_x);
    if (pixel_slope > 0) {
        if (camera_current_x > 0) {
            if (pixel_slope < PI_OVER_FOUR) {
                //Move right
                if (maze_structure[current_posX + 1][current_posY] != '#') {
                    current_posX++;
                    return;
                }
            } else {
                // Move up
                if (maze_structure[current_posX][current_posY - 1] != '#') {
                    current_posY--;
                    return;
                }
            }
        } else {
            if (pixel_slope < PI_OVER_FOUR) {
                //Move left
                if (maze_structure[current_posX - 1][current_posY] != '#') {
                    current_posX--;
                    return;
                }
            } else {
                //Move down
                if (maze_structure[current_posX][current_posY + 1] != '#') {
                    current_posY++;
                    return;
                }
            }
        }
        
    } else {
        if (camera_current_x > 0) {
            if (std::abs(pixel_slope) < PI_OVER_FOUR) {
                //move right
                if (maze_structure[current_posX + 1][current_posY] != '#') {
                    current_posX++;
                    return;
                }
            } else {
                //Move down
                if (maze_structure[current_posX][current_posY + 1] != '#') {
                    current_posY++;
                    return;
                }
            }
        } else {
            if (std::abs(pixel_slope) < PI_OVER_FOUR) {
                //Move left
                if (maze_structure[current_posX - 1][current_posY] != '#') {
                    current_posX--;
                    return;
                }
            } else {
                // Move up
                if (maze_structure[current_posX][current_posY - 1] != '#') {
                    current_posY--;
                    return;
                }
            }
        }
        
    }
    
    /*
    if (camera_current_x > 0) {
        if (camera_current_y > 0) {
            //Move up
            if (maze_structure[current_posX][current_posY - 1] != '#') {
                current_posY--;
            }
        } else {
            //Move right
            if (maze_structure[current_posX + 1][current_posY] != '#') {
                current_posX++;
            }
        }
    } else {
        if (camera_current_y > 0) {
            //Move down
            if (maze_structure[current_posX][current_posY + 1] != '#') {
                current_posY++;
            }
        } else {
            //Move left
            if (maze_structure[current_posX - 1][current_posY] != '#') {
                current_posX--;
            }
        }
    }
     */
    //check if game ended
    CheckGameStatus(current_posX, current_posY);
    
}

//--------------------------------------------------------------
void Maze::CheckGameStatus(int posX, int posY) {
    if (current_posX == end_x && current_posY == end_y) {
        Maze::SetMazeCompleted(true);
        if (free_game_mode) {
            win_sound.play();
        } else {
            next_maze_sound.play();
        }
    } else if (std::isdigit(maze_structure[current_posX][current_posY]) && free_game_mode) {
        inBattleMode = true;
        return;
    }
}
